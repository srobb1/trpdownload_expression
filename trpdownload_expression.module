<?php
/**
 * @file
 * Provides some examples showing how module developers could use the
 * Tripal Download API.
 */

/**
 * Implements hook_register_trpdownload_type().
 */
function trpdownload_expression_register_trpdownload_type() {
  $types = array();

  $types['expression_csv'] = array(
    'type_name' => 'Expression CSV',
    'format' => 'Comma-separated Values',
    'functions' => array(
      'generate_file' => 'trpdownload_expression_csv_generate_file',
    ),
  );

  return $types;
}

/**
 * Implements hook_menu().
 */
function trpdownload_expression_menu() {
  $items = array();

  $items['chado/expression/csv'] = array(
    'title' => 'Download Features: CSV',
    'page callback' => 'trpdownload_download_page',
    'page arguments' => array('expression_csv', 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,);
  
  return $items;
}

/**
 * Generates a file listing feature in CSV.
 *
 * @param $variables
 *   An associative array of parameters including:
 *     - q: all the query paramters.
 *     - site_safe_name: a sanitized version of your site name for use in variables & filenames.
 *     - type_info: an array of info for the download type.
 *     - suffix: the file format suffix.
 *     - filename: the filename of the file to generate not including path.
 *     - fullpath: the full path and filename of the file to generate.
 *     - format_name: a human-readable description of the format.
 * @param $job_id
 *   The ID of the tripal job executing this function ;-).
 */
function trpdownload_expression_csv_generate_file($variables, $job_id = NULL) {

  // Create the file and ready it for writting to.
  $filepath = variable_get('trpdownload_fullpath', '') . $variables['filename'];
  drush_print("File: " . $filepath);
  $FILE = fopen($filepath, 'w') or die ('Uable to create file to write to');


  // Add header to the file.
  fputcsv($FILE, array(
    'FeatureID', // feature name
    'TissueType', // tissue type
    'RPKMValue' // expression value
  ));


  $feature_id = $variables["q"]["feature_id"];
  // Query copied from the views interface with where arguments determined above.
  $query = "
     SELECT F.uniquename ,B.name , ER.signal FROM {elementresult} ER
      INNER JOIN {element} E ON E.element_id = ER.element_id
      INNER JOIN {feature} F ON F.feature_id = E.feature_id
      INNER JOIN {quantification} Q ON Q.quantification_id = ER.quantification_id
      INNER JOIN {acquisition} AQ ON AQ.acquisition_id = Q.acquisition_id
      INNER JOIN {assay} A ON A.assay_id = AQ.assay_id
      INNER JOIN {assay_biomaterial} AB ON AB.assay_id = A.assay_id
      INNER JOIN {biomaterial} B ON B.biomaterial_id = AB.biomaterial_id
    WHERE
      F.feature_id = :feature_id";

   $expressions = chado_query($query, array(":feature_id" => $feature_id));

  // for tracking progress.
  $count_query = preg_replace('/SELECT.*FROM/s', 'SELECT count(*) as num_lines FROM', $query);
  //$count_query = preg_replace('/ORDER BY .*$/', '', $count_query);
  $total_lines = chado_query($count_query, array(":feature_id" => $feature_id))->fetchField();
  drush_print('Total Lines: '.$total_lines);

  // For each db result write a CSV line to the file.
  $cur_line = 0;
  foreach ($expressions as $row) {

    // Output the progress.
    $cur_line++;
    $percent = $cur_line/$total_lines * 100;
    if ($percent%5 == 0) {
      drush_print(round($percent,2).'% Complete.');
      db_query('UPDATE {tripal_jobs} SET progress=:percent WHERE job_id=:id',
        array(':percent' => round($percent), ':id' => $job_id));
    }

    // Don't forget to write the line to the file ;-).
    fputcsv($FILE, (array)$row );
  }

  // Finally, close the file.
  fclose($FILE);
}

